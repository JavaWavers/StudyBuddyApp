package org.javawavers.studybuddy.calculations;
import java.util.Random;


public class Solution {
    //υποθετω οτι εχω παρει αυτα τα στοιχεια απο τον χρηστη και μετα τα στελνουμε εδω
    double maxdailyhours = 10;
    //ελενχος αν τα μαθηματαειναι συνεχομενα για πανω απο δυο μερες 
    //χρειαζομαστε εναν δυσδιαστατο πινακα που μεσα θα εχουμε βαλει τα μαθηματα του χρηστη και ποσες ωρες χρειαζεται να διαβασει την ημερα  προς το παρον ας υποθεσουμε 5 μαθηματα
    int dayhours[][] = new int[5][7];
    //γεμιζω τον πινακα τυχαια με max ωρες σε καθε μαθημα την ημερα 3
    Random random = new Random();
//κατασκευαστης για να γεμισουμε τον πινακα
    public Solution() {
        for (int i = 0; i < dayhours.length; i++) {
            for (int j = 0; j < dayhours[i].length; j++) {
                dayhours[i][j] = random.nextInt(4);
            }
        }
    }

//δημιουργια πινακα daily στον οποιο προστιθονται οι ωρες που διαβαζει ο χρηστης καθε μερα με βαση το προγραμμα
    double[] daily = new double[7];
    for (int j = 0; j < 7; j++) {
        for (int i = 0; i < dayhours.length; i++) {
            daily[i] = dayhours[i][j] + daily[j];
        }
    }

//μετραμε το συνολικο κοστος
    private double calculatecost(Solution solution) {
        double cost = 0;
        if (rowlessons()) {
            cost = cost + 100; //εαν εχει συνεχομενα μαθηματα αυξανουμε το κοστος κατα 100 μοναδες
        }
//ελενχος αν ο χρηστης ξεπερναει τις ωρες που εχουμε ορισει για καθημερινο διαβασμα
// ο πινακας κ ειναι για να γνωριζουμε μετεπειτα τις συγκεκριεμενς ημερες τις οποιες το προγραμμα ξεπερασε τις max ωρες που ειχαμε ορισει ? η που ειχε ορισει ο χρηστης
        int[] k = new int[7];
        for (int i = 0; i < 7; i++) {
            if(daily[i] > maxdailyhours) {
                cost = cost + 100;
                k[i] = i;
            }
        }
//αν το προγραμμα ξεπερασει τις 3 ωρες για το καθε μαθημα τοτε επιβαρυνεται με 50 μοναδες κοστους 
        for(int i = 0; i < 7; i++) {
            for(int j = 0; j < dayhours[i].length; j++) {
                if (dayhours[i][j] > 3) {
                    cost = cost + 50;
                }
            }
        }
//πρεπει να βαλουμε εναν περιορισμο για την προθεσμια των μαθηματων στον οποιο αν το προγραμμα καλυπτει την υλη παιρνει ενα μεγαλο κοστος = 200 
//για να το κανουμε αυτο χρειαζεται να ξερουμε τα deadlines των μαθηματων και τα deadlines των εργασιων σε δυο πινακες και πρεπει να ξερουμε αν το συγκεκριμενο προγραμμα καλυπτει την υλη μεχρι εκειη την ημερα
//συνεπως αν εχει για αυτο το μαθημα διαβασμα (η για την συγκεκριμενη εργασια )την επομενη μερα σημαινει οτι ξεπερασε το deadline και βαζουμε κοστος
//αρα πρεπει να χωρισουμε το διαβασμα σε δυο κατηγοριες διαβασμα για μαθηματα και διαβασμα για εργασιες
//αυτο σκεφτηκα για τις προθεσμιες αμα σκεφτειτε κατι ποιο ευκολο πειτε αλλα θα το γραψω απο αυριο γιατι τωρα πραγματικα δεν μπορω :)

//επισης πρεπει να προστεθει και ο περιορισμος διαλλειματος ο οποιος αν δεν εχει το προγραμμα υπολογισει διαλλειμα θα εχει κοστος = 50
        

        return cost;
    }

//μεθοδος υπολογισμου του περιορισμου των συνεχομενων ημερων αν το ιδιο μαθημα υπαρχει σε δυο συνεχομενες μερες για > 0 τοτε επιστρεφει true η αν ειναι κυριακη και θελουμε να ελενξουμε την κυριακη με την δευτερ αν εχει το ιδιο μαθημα 
    public boolean rowlessons () {
        for (int i = 0; i < dayhours.length; i++) {
            for (int j = 1; j < dayhours[i].length; j++) {
                if (dayhours[i][j] > 0 && dayhours[i][j-1] > 0 || dayhours[i][6] > 0 && dayhours[i][0] > 0) {
                    return true;
                }
            }
        }
        return false;
    }
}

//σε  αυτην την κλαση χρειαζεται να υπαρχει και μια μεθοδος η οποια θα δημιουργει την αρχικη ληση και μια αλλη η οποια θα κανει αλλαγες στο προγραμμα για να βρει την βελτιστη λυση 
//οι αλαγες μπορει να ειναι τυχαια κατανομη των ωρων , 

