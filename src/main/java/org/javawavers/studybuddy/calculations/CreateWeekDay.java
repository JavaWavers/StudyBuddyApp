package org.javawavers.studybuddy.calculations;

import static org.javawavers.studybuddy.courses.StaticUser.staticUser;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.javawavers.studybuddy.courses.ScheduledTask;
import org.javawavers.studybuddy.courses.Subject;

/**
 * The {@code CreateWeekDay} class is responsible for managing and creating weekly schedules
 * for studying. It organizes tasks into days and weeks, ensuring that each week has seven
 * days and assigning tasks to specific days based on the given schedule matrix.
 *
 * <p>This class works with {@code Task}, {@code Week}, {@code Day}, and {@code ScheduledTask}
 * objects to generate a user-friendly study plan.
 *
 * <h2>Key Features</h2>
 * <ul>
 *   <li>Create and organize weeks with corresponding days.</li>
 *   <li>Assign tasks to specific days based on a scheduling matrix.</li>
 *   <li>Integrate with the {@code StaticUser} class to update the user's weekly schedule.</li>
 * </ul>
 */

public class CreateWeekDay {
  /** The list containing all weeks generated by the schedule manager. */
  private ArrayList<Week> totalWeeks; // The list containing all weeks

  /** Constructs a {@code CreateWeekDay} object and initializes the list of weeks. */
  public CreateWeekDay() {
    totalWeeks = new ArrayList<>();
  }

  /**
   * Retrieves the list of all weeks generated by the schedule manager.
   *
   * @return the list of {@code Week} objects.
   */
  public ArrayList<Week> getTotalWeeks() {
    return totalWeeks;
  }

  /**
   * Retrieves a specific week from the list of total weeks based on the index.
   *
   * @param index the index of the week to retrieve.
   * @return the {@code Week} object at the specified index.
   */
  public Week getTheWeek(int index) {
    return totalWeeks.get(index);
  }

  /**
   * The managerWeekDay method creates the schedule for the days of the week, based on the schedule
   * (schedule matrix) and the tasks (bestTask). schedule The scheduling matrix (rows: tasks,
   * columns: days). bestTask The list of Task objects. colSize The number of days (columns) in the
   * schedule.
   */
  public void managerWeekDay(int[][] schedule, List<Task> bestTask, int colSize) {
    ArrayList<Week> totalWeeks = new ArrayList<>();
    LocalDate today = LocalDate.now(); // Today's date
    DayOfWeek currentDayOfWeek = today.getDayOfWeek();
    int daysUntilMonday = currentDayOfWeek.getValue() - DayOfWeek.MONDAY.getValue();
    // Initialize the first week
    Week currentWeek = new Week();

    // Fill days before today with empty tasks
    for (int i = 0; i < daysUntilMonday; i++) {
      Day emptyDay = new Day(); // Day with no tasks
      currentWeek.getDaysOfWeek().add(emptyDay);
    }

    List<ScheduledTask> scheduledTasksForDay = new ArrayList<>();

    for (int dayIndex = 0; dayIndex < colSize; dayIndex++) {
      LocalDate currentDate = today.plusDays(dayIndex - daysUntilMonday); // Calculate current date

      // Clear the scheduled tasks for the day
      scheduledTasksForDay.clear();
      for (int[] i : schedule) {
        int taskId = i[dayIndex];
        String taskType;
        if (taskId > 0) { // If there is a task for the specific slot
          Task task = bestTask.get(taskId); // Retrieve the Task from the list
          if (task.getTaskType() == 1) {
            taskType = "Διάβασμα";
          } else if (task.getTaskType() == 2) {
            taskType = "Επανάληψη";
          } else {
            taskType = "Εργασία";
          }
          ScheduledTask scheduledTask =
                        new ScheduledTask(
                                task.getSubject(),
                                taskType,
                                (int) Math.ceil(task.getTaskHours()),
                                currentDate,
                                new Subject(task.getSubject()) // Create Subject from the Task
                        );
          scheduledTasksForDay.add(scheduledTask);
        }
      }

      // Create a Day object for the current day
      Day currentDay = new Day();
      currentDay.todayTasks.addAll(scheduledTasksForDay);

      // Add the day to the week
      currentWeek.getDaysOfWeek().add(currentDay);

      // If the week is completed, or it's the last day, save it
      if (currentWeek.getDaysOfWeek().size() == 7 || dayIndex == colSize - 1) {
        totalWeeks.add(currentWeek);
        currentWeek = new Week(); // Start a new week
      }
    }
    staticUser.setTotalWeeks(totalWeeks);
    PrintWeeks printWeeks = new PrintWeeks();
    printWeeks.printWeeks(totalWeeks);
  }
}
